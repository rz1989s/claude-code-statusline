name: Test Suite

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  shellcheck:
    name: Shellcheck Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install shellcheck
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck

      - name: Run shellcheck on main script
        run: shellcheck --exclude=SC2034 --severity=error statusline.sh

      - name: Run shellcheck on test files
        run: |
          find tests -name "*.bash" -exec shellcheck {} +
          find tests -name "*.bats" -exec shellcheck {} +

  unit-tests:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        bash-version: ['4.4', '5.0', 'system']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install ccusage for cost tracking
        run: npm install -g ccusage

      - name: Install specific Bash version (Linux)
        if: matrix.os == 'ubuntu-latest' && matrix.bash-version != 'system'
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common
          # Install specific bash version if needed
          # For now, use system bash

      - name: Install bats-core
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get install -y bats
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            brew install bats-core
          fi

      - name: Install required tools
        run: |
          # Install jq (required dependency)
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get install -y jq bc
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            brew install jq bc
          fi

      - name: Run unit tests
        run: npm run test:unit

      - name: Run integration tests
        run: npm run test:integration

      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-bash-${{ matrix.bash-version }}
          path: |
            tests/**/*.log
            /tmp/statusline_test_*
            /tmp/.claude_*

  security-tests:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: [shellcheck]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install ccusage for cost tracking
        run: npm install -g ccusage

      - name: Install bats-core
        run: sudo apt-get update && sudo apt-get install -y bats jq bc

      - name: Run security-specific tests
        run: bats tests/unit/test_security.bats

      - name: Check for hardcoded secrets
        run: |
          # Simple grep for common secret patterns
          if grep -r -E "(password|secret|key|token)\s*=" statusline.sh; then
            echo "Potential hardcoded secrets found"
            exit 1
          fi

      - name: Verify no dangerous commands
        run: |
          # Check for potentially dangerous shell commands
          if grep -E "(rm\s+-rf|sudo|eval|exec)" statusline.sh; then
            echo "Potentially dangerous commands found - manual review required"
            # Don't fail automatically as some usage might be legitimate
          fi

  performance-tests:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [unit-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install ccusage for cost tracking
        run: npm install -g ccusage

      - name: Install bats-core and tools
        run: sudo apt-get update && sudo apt-get install -y bats jq bc time

      - name: Create performance test
        run: |
          cat > performance_test.bats << 'EOF'
          #!/usr/bin/env bats
          
          load 'tests/setup_suite'
          load 'tests/helpers/test_helpers'
          
          setup() {
              common_setup
              setup_full_mock_environment "clean" "connected" "success"
              cd "$TEST_TMP_DIR/mock_repo"
          }
          
          teardown() {
              common_teardown
          }
          
          @test "statusline should complete within 3 seconds" {
              local test_input='{"workspace":{"current_dir":"'$TEST_TMP_DIR'/mock_repo"},"model":{"display_name":"Claude 3.5 Sonnet"}}'
              
              local start_time=$(date +%s%N)
              run bash -c "echo '$test_input' | '$STATUSLINE_SCRIPT'"
              local end_time=$(date +%s%N)
              
              local duration=$(( (end_time - start_time) / 1000000 ))  # Convert to milliseconds
              
              [ "$status" -eq 0 ]  # Should succeed
              [ "$duration" -lt 3000 ]  # Should complete within 3 seconds
              
              echo "Execution time: ${duration}ms"
          }
          
          @test "concurrent executions should not interfere" {
              local test_input='{"workspace":{"current_dir":"'$TEST_TMP_DIR'/mock_repo"},"model":{"display_name":"Claude 3.5 Sonnet"}}'
              
              # Run 3 concurrent instances
              {
                  echo "$test_input" | "$STATUSLINE_SCRIPT" > /tmp/output1 &
                  echo "$test_input" | "$STATUSLINE_SCRIPT" > /tmp/output2 &
                  echo "$test_input" | "$STATUSLINE_SCRIPT" > /tmp/output3 &
                  wait
              }
              
              # All should produce valid output
              [ -s /tmp/output1 ]
              [ -s /tmp/output2 ]
              [ -s /tmp/output3 ]
              
              # Clean up
              rm -f /tmp/output{1,2,3}
          }
          EOF

      - name: Run performance tests
        run: bats performance_test.bats

      - name: Memory usage test
        run: |
          echo '{"workspace":{"current_dir":"'$(pwd)'"},"model":{"display_name":"Test"}}' | \
          /usr/bin/time -v ./statusline.sh 2>&1 | grep "Maximum resident set size" || true

  compatibility-tests:
    name: Compatibility Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04, macos-12, macos-13]
        include:
          - os: ubuntu-20.04
            shell: bash
          - os: ubuntu-22.04  
            shell: bash
          - os: macos-12
            shell: bash
          - os: macos-13
            shell: zsh
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install ccusage for cost tracking
        run: npm install -g ccusage

      - name: Install platform-specific tools
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y bats jq bc coreutils
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            brew install bats-core jq bc coreutils
          fi

      - name: Test with specific shell
        run: |
          # Test that statusline works with different shells
          ${{ matrix.shell }} -c 'echo "{\"workspace\":{\"current_dir\":\"$(pwd)\"},\"model\":{\"display_name\":\"Test\"}}" | ./statusline.sh'

      - name: Test date command compatibility
        run: |
          # Test both GNU and BSD date commands
          if command -v gdate >/dev/null; then
            echo "GNU date available"
            gdate "+%Y-%m-%d"
          fi
          echo "System date:"
          date "+%Y-%m-%d"

      - name: Run compatibility tests
        run: npm test

  coverage:
    name: Test Coverage Analysis
    runs-on: ubuntu-latest
    needs: [unit-tests, security-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install ccusage for cost tracking
        run: npm install -g ccusage

      - name: Install analysis tools
        run: |
          sudo apt-get update
          sudo apt-get install -y bats jq bc
          # Install kcov for bash coverage (if needed)
          # sudo apt-get install -y kcov

      - name: Run all tests
        run: npm test

      - name: Generate coverage report
        run: |
          # Simple coverage analysis by counting tested functions
          echo "## Test Coverage Analysis" > coverage_report.md
          echo "" >> coverage_report.md
          
          # Count functions in main script
          total_functions=$(grep -c "^[a-zA-Z_][a-zA-Z0-9_]*() {" statusline.sh || echo "0")
          echo "Total functions in statusline.sh: $total_functions" >> coverage_report.md
          
          # Count test files
          unit_tests=$(find tests/unit -name "*.bats" | wc -l)
          integration_tests=$(find tests/integration -name "*.bats" | wc -l)
          echo "Unit test files: $unit_tests" >> coverage_report.md
          echo "Integration test files: $integration_tests" >> coverage_report.md
          
          # Count total test cases
          total_test_cases=$(grep -r "@test" tests/ | wc -l || echo "0")
          echo "Total test cases: $total_test_cases" >> coverage_report.md
          
          cat coverage_report.md

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage_report.md

  final-validation:
    name: Final Validation
    runs-on: ubuntu-latest
    needs: [shellcheck, unit-tests, security-tests, performance-tests, compatibility-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install ccusage for cost tracking
        run: npm install -g ccusage

      - name: Install tools
        run: sudo apt-get update && sudo apt-get install -y bats jq bc

      - name: Final integration test
        run: |
          # Test with real-world scenario (using mocks)
          echo '{"workspace":{"current_dir":"'$(pwd)'"},"model":{"display_name":"Claude 3.5 Sonnet"}}' | ./statusline.sh

      - name: Validate package.json scripts
        run: |
          npm run lint || echo "Lint check completed"
          npm run clean

      - name: Check for test artifacts
        run: |
          # Ensure no test artifacts are left behind
          if find /tmp -name "statusline_test_*" -o -name ".claude_*test*" 2>/dev/null | grep -q .; then
            echo "Warning: Test artifacts found in /tmp"
            find /tmp -name "statusline_test_*" -o -name ".claude_*test*" 2>/dev/null || true
          fi

      - name: Generate test summary
        run: |
          echo "## Test Suite Summary" > test_summary.md
          echo "" >> test_summary.md
          echo "✅ Shellcheck analysis passed" >> test_summary.md
          echo "✅ Unit tests passed on multiple platforms" >> test_summary.md
          echo "✅ Security analysis completed" >> test_summary.md
          echo "✅ Performance benchmarks met" >> test_summary.md
          echo "✅ Compatibility tests passed" >> test_summary.md
          echo "✅ Final validation successful" >> test_summary.md
          echo "" >> test_summary.md
          echo "All tests completed successfully! 🎉" >> test_summary.md
          
          cat test_summary.md

      - name: Upload test summary
        uses: actions/upload-artifact@v4
        with:
          name: test-summary
          path: test_summary.md